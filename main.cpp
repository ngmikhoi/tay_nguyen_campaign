/*
* Ho Chi Minh City University of Technology
* Faculty of Computer Science and Engineering
* Initial code for Assignment 1
* Programming Fundamentals Spring 2025
* Date: 07.02.2025
*/

//The library here is concretely set, students are not allowed to include any other libraries.

#include "tay_nguyen_campaign.h"

using namespace std;

void tnc_tc_01() {
    cout << "----- Sample Testcase 01 -----" << endl;
    string input_file("tnc_tc_01_input");
    int LF1[17], LF2[17], EXP1, EXP2, T1, T2, E;
    if (!readFile(input_file, LF1, LF2, EXP1, EXP2, T1, T2, E)) {
        cout << "fail in reading file";
        return;
    }        
}

void test_task21(){
    struct TestCase {
        string input;
        string expected;
    };

    TestCase testCases[] = {
        {"Kon Tum 0", "DECOY"},
        {"Pleiku 1", "DECOY"},
        {"Gia Lai 2", "DECOY"},
        {"Buon Ma Thuot 3", "Buon Ma Thuot"},
        {"Duc Lap 4", "Duc Lap"},
        {"Dak Lak 5", "Dak Lak"},
        {"National Route 6", "National Route 21"},
        {"National Route 7", "National Route 14"},
        {"Unknown 8", "INVALID"},
        {"FakeTarget 100", "INVALID"},
        {"Kon Tum -1", "DECOY"},

        {"ABCD1ASD2", "National Route 21"},
        {"asdf12ased23", "Buon Ma Thuot"},
        {"12asdfdg90", "Dak Lak"},
        {"45abcded45abcde", "Buon Ma Thuot"},
        {"this is a string that contains 2 numbers but only 5 appears", "Dak Lak"},
        {"Duc0Lap1", "Duc Lap"},
        {"000Duc001Lap", "Duc Lap"},
        {"Dak0000000002Lak0000000000", "Dak Lak"},
        {"National2R2oute", "National Route 14"},
        {"ab2cdefg4", "Duc Lap"},

        {"Onii Chan no 3ka 3ka 3ka", "National Route 21"},
        {"I am in fucking class of ML of Mr K at 12 oclock and finish at 1 50", "Buon Ma Thuot"},
        {"Ban tum lum 3 phat luon 6 6", "Duc Lap"},
        {"1 diem PPL 2 diem DSA 3 diem KTLT", "National Route 21"},
        {"4 diem OS 5 diem CA 7 diem CN", "Dak Lak"},
        {"nhin len bau troi se thay 1 vi tinh tu ruc sang la j 9 7", "National Route 14"},
        {"1 phat la say dam, 2 phat la dam say, 0 phat la ngat ngay", "Dak Lak"},
        {"test nay se nhieu so 00000000000000000000000000000000000 13 00000000000000000000000001", "National Route 21"},

        {"Text nay ko co so dau:))))))))", "INVALID"},
        {"NAY CUNG GIONG O TREN", "INVALID"},
        {"Kamehameha", "INVALID"},
        {"Nhung phuc giay ngot ngao a nho va mong, dong luu but nam xua...", "INVALID"},

        {"1 2 3 4 5 6 7 8 9 10", "INVALID"},
        {"0 1: don't pick up the phone You know he's only callin' 'cause he's drunk and alone 2: don't let him in You'll have to kick him out again 3: don't be his friend", "INVALID"},
        {"*1Kon# T#um", "DECOY"},
        {"Plei000ku", "DECOY"},
        {"Kon Tum*01!", "DECOY"},
    };
    int pass = 0, fail = 0;
    for (const auto& testCase : testCases) {
        string result = determineRightTarget(testCase.input);
        if(result == testCase.expected){
            pass++;
        } else {
            fail++;
        }
        cout << "Input: \"" << testCase.input << "\" " << endl << "Expected: \"" << testCase.expected 
             << "\" | Got: \"" << result << "\" | " 
             << (result == testCase.expected ? "Passed" : "Failed") 
             << endl << endl;
    }
    cout << "_____________________________________________________________________________________\n" << "Pass: " << pass << endl << "Fail: " << fail << endl;
}

void test_task22(){
    struct TestCase {
        string input;
        int e1;
        int e2;
        string expected;
    };

    TestCase testCases[] = {
        {"kAl kAd", 500, 200, "Dak Lak"},
        {"Pal cUd", 400, 100, "Duc Lap"},
        {"mut nOk", 100, 100, "INVALID"},
        {"uKiElP", 150, 150, "INVALID"},
        {"iAL Aig", 0, 0, "INVALID"},
        {"tOUht am NOUb", 50, 50, "Buon Ma Thuot"},
        {"kAl       kAd              ", 500, 200, "INVALID"},
        {"12 EtUOr LaNoitAn", 50, 50, "National Route 21"},

        {"!Dak Lak", 50, 50, "INVALID"},
        {"B#uon Ma% T^&*()", 50, 50, "INVALID"},

        {"Heo Peo", 350, 400, "Dak Lak"},
        {"Fcm Ncm", 350, 350, "Dak Lak"},
        {"Haut Sg Znauz", 320, 350, "Buon Ma Thuot"},
        {"Sfyntsfq Wtzyj 21", 399, 402, "National Route 21"},
        {"Iml Rsk", 300, 300, "INVALID"}
    };
    int pass = 0, fail = 0;
    for (const auto& testCase : testCases) {
        string result = decodeTarget(testCase.input, testCase.e1, testCase.e2);
        if(result == testCase.expected){
            pass++;
        } else {
            fail++;
        }
        cout << "Input: \"" << testCase.input << "\" " << " EXP1: " << testCase.e1 << " E2: " << testCase.e2 << endl << "Expected: \"" << testCase.expected 
             << "\" | Got: \"" << result << "\" | " 
             << (result == testCase.expected ? "Passed" : "Failed") 
             << endl << endl;
    }
    cout << "_____________________________________________________________________________________\n" << "Pass: " << pass << endl << "Fail: " << fail << endl;
}

void test_task5() {
    struct TestCase {
        int shortfall;
        int supply[5][5];
        int expect;
    };

    TestCase testCases[] = {
        {1050, {{150, 200, 180, 90, 110},
                {70, 80, 120, 140, 160},
                {220, 240, 200, 190, 130},
                {100, 110, 300, 280, 320},
                {170, 210, 260, 230, 290}}, 1050},
        
        {500, {{50, 60, 70, 80, 90},
               {100, 110, 120, 130, 140},
               {150, 160, 170, 180, 190},
               {200, 210, 220, 230, 240},
               {250, 260, 270, 280, 290}}, 500},
        
        {1401, {{500, 400, 300, 200, 100},
                {50, 60, 70, 80, 90},
                {10, 20, 30, 40, 50},
                {5, 15, 25, 35, 45},
                {55, 65, 75, 85, 95}}, 1405},
        
        {750, {{10, 20, 30, 40, 50},
               {60, 70, 80, 90, 100},
               {110, 120, 130, 140, 150},
               {160, 170, 180, 190, 200},
               {210, 220, 230, 240, 250}}, 750},
        
        {1300, {{300, 310, 320, 330, 340},
                {350, 360, 370, 380, 390},
                {400, 410, 420, 430, 440},
                {450, 460, 470, 480, 490},
                {500, 510, 520, 530, 540}}, 1600},
        
        {900, {{20, 40, 60, 80, 100},
               {120, 140, 160, 180, 200},
               {220, 240, 260, 280, 300},
               {320, 340, 360, 380, 400},
               {420, 440, 460, 480, 500}}, 900},
        
        {1600, {{100, 200, 300, 400, 500},
                {600, 700, 800, 900, 1000},
                {1100, 1200, 1300, 1400, 1500},
                {1600, 1700, 1800, 1900, 2000},
                {2100, 2200, 2300, 2400, 2500}}, 1600},
        
        {1150, {{500, 400, 300, 200, 100},
                {90, 80, 70, 60, 50},
                {40, 30, 20, 10, 5},
                {15, 25, 35, 45, 55},
                {65, 75, 85, 95, 105}}, 1150},
        
        {700, {{30, 60, 90, 120, 150},
               {180, 210, 240, 270, 300},
               {330, 360, 390, 420, 450},
               {480, 510, 540, 570, 600},
               {630, 660, 690, 720, 750}}, 720},
        
        {500, {{50, 60, 70, 80, 90},
               {100, 110, 120, 130, 140},
               {150, 160, 170, 180, 190},
               {200, 210, 220, 230, 240},
               {250, 260, 270, 280, 290}}, 500},
        
        {1750, {{200, 300, 400, 500, 600},
                {700, 800, 900, 1000, 1100},
                {1200, 1300, 1400, 1500, 1600},
                {1700, 1800, 1900, 2000, 2100},
                {2200, 2300, 2400, 2500, 2600}}, 2000},
        
        {950, {{10, 20, 30, 40, 50},
               {60, 70, 80, 90, 100},
               {110, 120, 130, 140, 150},
               {160, 170, 180, 190, 200},
               {210, 220, 230, 240, 250}}, 950},
        
        {1350, {{150, 250, 350, 450, 550},
                {650, 750, 850, 950, 1050},
                {1150, 1250, 1350, 1450, 1550},
                {1650, 1750, 1850, 1950, 2050},
                {2150, 2250, 2350, 2450, 2550}}, 1750},
        
        {600, {{5, 15, 25, 35, 45},
               {55, 65, 75, 85, 95},
               {105, 115, 125, 135, 145},
               {155, 165, 175, 185, 195},
               {205, 215, 225, 235, 245}}, 605},
        
        {950, {{10, 20, 30, 40, 50},
               {60, 70, 80, 90, 100},
               {110, 120, 130, 140, 150},
               {160, 170, 180, 190, 200},
               {210, 220, 230, 240, 250}}, 950},
        
        {1350, {{150, 250, 350, 450, 550},
                {650, 750, 850, 950, 1050},
                {1150, 1250, 1350, 1450, 1550},
                {1650, 1750, 1850, 1950, 2050},
                {2150, 2250, 2350, 2450, 2550}}, 1750},
        
         
        {700, {{30, 60, 90, 120, 150},
              {180, 210, 240, 270, 300},
              {330, 360, 390, 420, 450},
              {480, 510, 540, 570, 600},
              {630, 660, 690, 720, 750}}, 720},
        
        {800, {{50, 100, 150, 200, 250},
               {75, 125, 175, 225, 275},
               {90, 140, 190, 240, 290},
               {110, 160, 210, 260, 310},
               {130, 180, 230, 280, 330}}, 800},
        
        {950, {{10, 20, 30, 40, 50},
               {60, 70, 80, 90, 100},
               {110, 120, 130, 140, 150},
               {160, 170, 180, 190, 200},
               {210, 220, 230, 240, 250}}, 950},
        
        {1200, {{200, 250, 300, 350, 400},
                {450, 500, 550, 600, 650},
                {700, 750, 800, 850, 900},
                {950, 1000, 1050, 1100, 1150},
                {1200, 1250, 1300, 1350, 1400}}, 1500},
        
        {600, {{5, 15, 25, 35, 45},
               {55, 65, 75, 85, 95},
               {105, 115, 125, 135, 145},
               {155, 165, 175, 185, 195},
               {205, 215, 225, 235, 245}}, 605},
        
        {1450, {{300, 310, 320, 330, 340},
                {350, 360, 370, 380, 390},
                {400, 410, 420, 430, 440},
                {450, 460, 470, 480, 490},
                {500, 510, 520, 530, 540}}, 1600},
        
        {1800, {{100, 200, 300, 400, 500},
                {600, 700, 800, 900, 1000},
                {1100, 1200, 1300, 1400, 1500},
                {1600, 1700, 1800, 1900, 2000},
                {2100, 2200, 2300, 2400, 2500}}, 1800},
        
        {500, {{20, 40, 60, 80, 100},
               {120, 140, 160, 180, 200},
               {220, 240, 260, 280, 300},
               {320, 340, 360, 380, 400},
               {420, 440, 460, 480, 500}}, 500},
        
        {1123, {{400, 350, 300, 250, 200},
                {150, 100, 50, 25, 10},
                {5, 15, 30, 45, 60},
                {75, 90, 105, 120, 135},
                {150, 165, 180, 195, 210}}, 1125},
        
        {750, {{30, 60, 90, 120, 150},
               {180, 210, 240, 270, 300},
               {330, 360, 390, 420, 450},
               {480, 510, 540, 570, 600},
               {630, 660, 690, 720, 750}}, 750},
        

        {798, {{50, 100, 150, 200, 250},
               {75, 125, 175, 225, 275},
               {90, 140, 190, 240, 290},
               {110, 160, 210, 260, 310},
               {130, 180, 230, 280, 330}}, 800},

    
        {1200, {{200, 250, 300, 350, 400},
                {450, 500, 550, 600, 650},
                {700, 750, 800, 850, 900},
                {950, 1000, 1050, 1100, 1150},
                {1200, 1250, 1300, 1350, 1400}}, 1500},
    
        {600, {{5, 15, 25, 35, 45},
               {55, 65, 75, 85, 95},
               {105, 115, 125, 135, 145},
               {155, 165, 175, 185, 195},
               {205, 215, 225, 235, 245}}, 605},
    
        {1450, {{300, 310, 320, 330, 340},
                {350, 360, 370, 380, 390},
                {400, 410, 420, 430, 440},
                {450, 460, 470, 480, 490},
                {500, 510, 520, 530, 540}}, 1600},
    
        {1800, {{100, 200, 300, 400, 500},
                {600, 700, 800, 900, 1000},
                {1100, 1200, 1300, 1400, 1500},
                {1600, 1700, 1800, 1900, 2000},
                {2100, 2200, 2300, 2400, 2500}}, 1800},
    
        {500, {{20, 40, 60, 80, 100},
               {120, 140, 160, 180, 200},
               {220, 240, 260, 280, 300},
               {320, 340, 360, 380, 400},
               {420, 440, 460, 480, 500}}, 500},
    
        {1100, {{400, 350, 300, 250, 200},
                {150, 100, 50, 25, 10},
                {5, 15, 30, 45, 60},
                {75, 90, 105, 120, 135},
                {150, 165, 180, 195, 210}}, 1100},
        
        {1126, {{400, 350, 300, 250, 200},
                {150, 100, 50, 25, 10},
                {5, 15, 30, 45, 60},
                {75, 90, 105, 120, 135},
                {150, 165, 180, 195, 210}}, 1130},
    
        {750, {{30, 60, 90, 120, 150},
               {180, 210, 240, 270, 300},
               {330, 360, 390, 420, 450},
               {480, 510, 540, 570, 600},
               {630, 660, 690, 720, 750}}, 750},
    
    
        {1050, {{150, 200, 180, 90, 110},
              {70, 80, 120, 140, 160},
              {220, 240, 200, 190, 130},
              {100, 110, 300, 280, 320},
              {170, 210, 260, 230, 290}}, 1050},
    
        {45, {{1, 2, 3, 4, 5},
              {6, 7, 8, 9, 10},
              {11, 12, 13, 14, 15},
              {16, 17, 18, 19, 20},
              {21, 22, 23, 24, 25}}, 45},
    
        {75, {{10, 15, 20, 25, 30},
              {35, 40, 45, 50, 55},
              {60, 65, 70, 75, 80},
              {85, 90, 95, 99, 98},
              {97, 96, 95, 94, 93}}, 100},
    
        {60, {{0, 5, 10, 15, 20},
              {25, 30, 35, 40, 45},
              {50, 55, 60, 65, 70},
              {75, 80, 85, 90, 95},
              {99, 98, 97, 96, 95}}, 60},
    
        {25, {{2, 4, 6, 8, 10},
              {12, 14, 16, 18, 20},
              {22, 24, 25, 26, 28},
              {30, 32, 34, 36, 38},
              {40, 42, 44, 46, 48}}, 30},
    
        {95, {{99, 98, 97, 96, 95},
              {94, 93, 92, 91, 90},
              {89, 88, 87, 86, 85},
              {84, 83, 82, 81, 80},
              {79, 78, 77, 76, 75}}, 385},
    
        {33, {{1, 3, 5, 7, 9},
              {11, 13, 15, 17, 19},
              {21, 23, 25, 27, 29},
              {31, 33, 35, 37, 39},
              {41, 43, 45, 47, 49}}, 33},
    
        {50, {{10, 20, 30, 40, 50},
              {15, 25, 35, 45, 55},
              {12, 22, 32, 42, 52},
              {17, 27, 37, 47, 57},
              {19, 29, 39, 49, 59}}, 73},
    
        {70, {{5, 10, 15, 20, 25},
              {30, 35, 40, 45, 50},
              {55, 60, 65, 70, 75},
              {80, 85, 90, 95, 99},
              {97, 94, 91, 88, 85}}, 75},
    
        {276, {{99, 97, 95, 93, 91},
              {89, 87, 85, 83, 81},
              {79, 77, 75, 73, 71},
              {69, 67, 65, 63, 61},
              {59, 57, 55, 53, 51}}, 277},
    
        {388, {{5, 10, 15, 20, 25},
             {30, 35, 40, 45, 50},
             {55, 60, 65, 70, 75},
             {80, 85, 90, 95, 99},
             {98, 97, 96, 95, 94}}, 388},
            
        {16,  {{1, 2, 3, 4, 5},
             {6, 7, 8, 9, 10},
             {11, 12, 13, 14, 15},
             {16, 17, 18, 19, 20},
             {21, 22, 23, 24, 25}}, 16},
   
       {156, {{5, 10, 15, 20, 25},
             {30, 35, 40, 45, 50},
             {55, 60, 65, 70, 75},
             {80, 85, 90, 95, 99},
             {95, 95, 90, 88, 85}}, 158},
   
       {28, {{1, 3, 5, 7, 9},
             {11, 13, 15, 17, 19},
             {21, 23, 25, 27, 29},
             {31, 33, 35, 37, 39},
             {41, 43, 45, 47, 49}}, 29},
   
       {33, {{2, 4, 6, 8, 10},
             {12, 14, 16, 18, 20},
             {22, 24, 26, 28, 30},
             {32, 33, 34, 36, 38},
             {40, 42, 44, 46, 48}}, 34},
   
       {50, {{9, 17, 27, 31, 45},
             {54, 63, 73, 81, 90},
             {99, 88, 77, 66, 55},
             {44, 33, 23, 11, 1},
             {1, 3, 5, 7, 9}}, 51},
   
       {56, {{10, 20, 30, 40, 50},
             {15, 25, 35, 45, 55},
             {12, 22, 32, 42, 52},
             {17, 27, 37, 47, 56},
             {19, 29, 39, 49, 59}}, 73},
   
       {160, {{5, 10, 15, 20, 25},
             {30, 35, 40, 45, 50},
             {55, 60, 63, 70, 75},
             {80, 85, 90, 95, 99},
             {97, 94, 91, 88, 85}}, 160},
   
       {473, {{99, 98, 97, 96, 95},
             {94, 93, 92, 91, 90},
             {89, 88, 87, 86, 85},
             {84, 83, 82, 81, 80},
             {79, 78, 77, 76, 72}}, 473},
   
       {299, {{0, 10, 20, 30, 40},
             {50, 60, 70, 80, 88},
             {90, 91, 92, 93, 94},
             {95, 96, 97, 98, 99},
             {9, 19, 29, 39, 49}}, 299},
   
       {136, {{9, 18, 27, 36, 45},
             {54, 63, 72, 81, 90},
             {91, 92, 93, 94, 95},
             {96, 97, 98, 99, 100},
             {101, 102, 103, 104, 105}}, 144},
        
        {40,  {{9, 9, 9, 9, 9},
             {9, 9, 9, 9, 9},
             {9, 9, 9, 9, 9},
             {9, 9, 9, 9, 9},
             {9, 9, 9, 9, 9}}, 45},
   
       {309, {{72, 72, 72, 72, 72},
             {72, 72, 92, 72, 72},
             {72, 72, 72, 72, 72},
             {72, 72, 20, 72, 72},
             {72, 72, 72, 72, 72}}, 328},

        {329, {{72, 72, 72, 72, 72},
             {72, 72, 92, 72, 72},
             {72, 72, 72, 72, 72},
             {72, 72, 20, 72, 72},
             {72, 72, 72, 72, 72}}, 360},
        {362, {{72, 72, 72, 72, 72},
             {72, 72, 92, 72, 72},
             {72, 72, 72, 72, 72},
             {72, 72, 20, 72, 72},
             {72, 72, 72, 72, 72}}, 380},

        // Randomly distributed values
    {41, {{5, 12, 8, 10, 7},
    {3, 9, 14, 6, 11},
    {2, 15, 4, 13, 1},
    {8, 10, 7, 5, 12},
    {11, 6, 3, 9, 14}}, 41},

{89, {{20, 5, 30, 15, 10},
    {8, 22, 18, 11, 13},
    {7, 19, 25, 14, 6},
    {21, 16, 12, 9, 17},
    {24, 3, 28, 4, 26}}, 89},

// Sparse distribution (some cells with zero values)
{25, {{0, 0, 5, 10, 0},
    {2, 3, 0, 8, 4},
    {6, 7, 1, 0, 9},
    {0, 5, 2, 11, 0},
    {4, 0, 3, 0, 6}}, 25},

{60, {{10, 0, 15, 5, 0},
    {0, 8, 12, 0, 7},
    {3, 11, 0, 6, 14},
    {9, 4, 13, 2, 0},
    {0, 20, 1, 18, 16}}, 60},

// Edge case: Minimal supply
{5,  {{1, 1, 1, 1, 1},
    {1, 1, 1, 1, 1},
    {1, 1, 1, 1, 1},
    {1, 1, 1, 1, 1},
    {1, 1, 1, 1, 1}}, 5},

{4,  {{1, 1, 1, 1, 1},
    {1, 1, 1, 1, 1},
    {1, 1, 1, 1, 1},
    {1, 1, 1, 1, 1},
    {1, 1, 1, 1, 1}}, 5},

{3,  {{1, 1, 1, 1, 1},
    {1, 1, 1, 1, 1},
    {1, 1, 1, 1, 1},
    {1, 1, 1, 0, 1},
    {1, 1, 1, 1, 1}}, 4},

{5,  {{1, 1, 1, 1, 1},
    {1, 1, 1, 1, 1},
    {1, 1, 1, 1, 1},
    {1, 1, 1, 0, 1},
    {1, 1, 1, 1, 1}}, 5},

// Edge case: Large supply
{500, {{99, 99, 99, 99, 999},
     {99, 99, 99, 99, 99},
     {99, 99, 99, 99, 99},
     {99, 99, 999, 99, 99},
     {99, 99, 99, 99, 99}}, 1395},

{1500, {{99, 99, 99, 99, 999},
     {99, 99, 99, 99, 99},
     {99, 99, 99, 99, 99},
     {99, 99, 999, 99, 99},
     {99, 99, 99, 99, 99}}, 2295},


{2500, {{99, 99, 99, 99, 599},
     {99, 99, 99, 99, 99},
     {99, 99, 599, 599, 99},
     {99, 99, 599, 599, 99},
     {99, 99, 99, 99, 99}}, 2995},

{2000, {{99, 99, 99, 99, 599},
     {99, 99, 99, 99, 99},
     {99, 99, 599, 599, 99},
     {99, 99, 599, 599, 99},
     {99, 99, 99, 99, 99}}, 2495}
   
    };
    
    
    int pass = 0, fail = 0;
    for (auto& test : testCases) {
        int gotOutput = resupply(test.shortfall, test.supply);
        bool isPassed = (gotOutput == test.expect);
        if (isPassed) {
            pass++;
        } else {
            fail++;
        }
        cout << "Shortfall: " << test.shortfall << " | Expected: " << test.expect << " | Got: " << gotOutput << " | "
             << (isPassed ? "Passed" : "Failed") << endl;
    }
    cout << "_____________________________________________________________________________________"
         << "Pass: " << pass << " | Fail: " << fail << endl;
}

int main(int argc, const char * argv[]) {
    test_task21();
    test_task22();
    test_task5();
    return 0;
}